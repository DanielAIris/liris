#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Liris/ui/widgets/tabs/response_area_widget.py - Version refactoris√©e avec extraction HTML
"""

import os
import json
import traceback
import time
import re
from PyQt5 import QtWidgets, QtCore, QtGui
from PyQt5.QtCore import Qt, pyqtSignal

from utils.logger import logger
from utils.exceptions import VisionDetectionError, ValidationError, OrchestrationError
from ui.styles.platform_config_style import PlatformConfigStyle
from core.orchestration.state_automation import StateBasedAutomation


class ResponseAreaWidget(QtWidgets.QWidget):
    """Widget de configuration de la zone de r√©ponse pour les plateformes d'IA"""

    # Signaux
    response_area_configured = pyqtSignal(str, dict)  # Plateforme, configuration
    response_area_detected = pyqtSignal(str, dict)  # Plateforme, position
    response_received = pyqtSignal(str, str)  # Plateforme, contenu de la r√©ponse

    def __init__(self, config_provider, conductor, parent=None):
        """
        Initialise le widget de configuration de la zone de r√©ponse
        """
        super().__init__(parent)

        # Debug
        print("ResponseAreaWidget: Initialisation...")

        self.config_provider = config_provider
        self.conductor = conductor
        self.profiles = {}
        self.current_platform = None
        self.current_profile = None

        # Syst√®me d'automatisation intelligente
        self.state_automation = None

        try:
            self._init_ui()
            print("ResponseAreaWidget: Initialisation termin√©e avec succ√®s")
        except Exception as e:
            logger.error(f"Erreur lors de l'initialisation de ResponseAreaWidget: {str(e)}")
            print(f"ERREUR CRITIQUE: {str(e)}")
            print(traceback.format_exc())

    def _init_ui(self):
        """Configure l'interface utilisateur du widget de zone de r√©ponse - DISPOSITION 2 COLONNES"""

        # Layout principal horizontal (2 colonnes)
        main_layout = QtWidgets.QHBoxLayout(self)
        main_layout.setSpacing(15)
        main_layout.setContentsMargins(10, 10, 10, 10)

        # ============================
        # COLONNE GAUCHE - CONTR√îLES
        # ============================
        left_column = QtWidgets.QVBoxLayout()
        left_column.setSpacing(15)

        # === Section 1: S√©lection de la plateforme ===
        platform_group = QtWidgets.QGroupBox("üéØ Choisissez votre plateforme")
        platform_group.setStyleSheet(PlatformConfigStyle.get_group_box_style())
        platform_group.setMaximumWidth(300)
        platform_layout = QtWidgets.QVBoxLayout(platform_group)

        # Combo de s√©lection des plateformes
        self.platform_combo = QtWidgets.QComboBox()
        self.platform_combo.setStyleSheet(PlatformConfigStyle.get_input_style())
        self.platform_combo.currentIndexChanged.connect(self._on_platform_selected)
        platform_layout.addWidget(self.platform_combo)

        left_column.addWidget(platform_group)

        # === Section 2: Actions ===
        actions_group = QtWidgets.QGroupBox("‚ö° Actions")
        actions_group.setStyleSheet(PlatformConfigStyle.get_group_box_style())
        actions_group.setMaximumWidth(300)
        actions_layout = QtWidgets.QVBoxLayout(actions_group)

        # Bouton de test automatique
        self.auto_test_button = QtWidgets.QPushButton("üöÄ Test automatique + Position")
        self.auto_test_button.setStyleSheet(PlatformConfigStyle.get_button_style())
        self.auto_test_button.clicked.connect(self._on_auto_test)
        actions_layout.addWidget(self.auto_test_button)

        # Bouton d'extraction HTML
        self.html_extract_button = QtWidgets.QPushButton("üìã Extraire via Console HTML")
        self.html_extract_button.setStyleSheet(PlatformConfigStyle.get_button_style())
        self.html_extract_button.clicked.connect(self._on_html_extraction)
        self.html_extract_button.setEnabled(False)  # Activ√© apr√®s test automatique
        actions_layout.addWidget(self.html_extract_button)

        # Statut de capture
        self.capture_status = QtWidgets.QLabel("Aucune capture effectu√©e")
        self.capture_status.setAlignment(Qt.AlignCenter)
        self.capture_status.setStyleSheet(PlatformConfigStyle.get_status_normal_style())
        self.capture_status.setWordWrap(True)
        actions_layout.addWidget(self.capture_status)

        # Options de capture
        options_layout = QtWidgets.QVBoxLayout()
        self.remember_position_check = QtWidgets.QCheckBox("üîí M√©moriser la position")
        self.remember_position_check.setChecked(True)
        options_layout.addWidget(self.remember_position_check)

        self.force_capture_check = QtWidgets.QCheckBox("üîÑ Forcer la capture")
        options_layout.addWidget(self.force_capture_check)

        actions_layout.addLayout(options_layout)

        left_column.addWidget(actions_group)

        # === Section 3: Sauvegarde ===
        save_group = QtWidgets.QGroupBox("üíæ Sauvegarde")
        save_group.setStyleSheet(PlatformConfigStyle.get_group_box_style())
        save_group.setMaximumWidth(300)
        save_layout = QtWidgets.QVBoxLayout(save_group)

        # Bouton de sauvegarde
        self.save_button = QtWidgets.QPushButton("‚úÖ Enregistrer la configuration")
        self.save_button.setStyleSheet(PlatformConfigStyle.get_button_style())
        self.save_button.clicked.connect(self._on_save_config)
        save_layout.addWidget(self.save_button)

        # Note sur la fin du processus
        help_note = QtWidgets.QLabel(
            "<b>üí° Note:</b> Apr√®s avoir configur√© tous les √©l√©ments d'interface, "
            "vous pouvez tester la connexion compl√®te depuis l'onglet 'Configuration G√©n√©rale'."
        )
        help_note.setWordWrap(True)
        help_note.setStyleSheet("color: #074E68; font-size: 11px;")
        save_layout.addWidget(help_note)

        left_column.addWidget(save_group)

        # Espacer pour pousser vers le haut
        left_column.addStretch(1)

        # =============================
        # COLONNE DROITE - CONFIGURATION
        # =============================
        right_column = QtWidgets.QVBoxLayout()
        right_column.setSpacing(15)

        # Explication en haut de la colonne droite
        explanation = QtWidgets.QLabel(
            "üéØ <b>Extraction de r√©ponses IA via Console HTML</b><br>"
            "M√©thode pr√©cise pour extraire les r√©ponses sans OCR ni s√©lection manuelle."
        )
        explanation.setStyleSheet(PlatformConfigStyle.get_explanation_style())
        explanation.setWordWrap(True)
        explanation.setAlignment(Qt.AlignLeft)
        right_column.addWidget(explanation)

        # === Guide HTML F12 ===
        guide_group = QtWidgets.QGroupBox("üìã Guide Console HTML")
        guide_group.setStyleSheet(PlatformConfigStyle.get_group_box_style())
        guide_layout = QtWidgets.QVBoxLayout(guide_group)

        # Instructions
        instructions = QtWidgets.QLabel(
            "<b>Instructions :</b><br>"
            "1. üöÄ Lancez d'abord le test automatique<br>"
            "2. ‚è≥ Attendez la r√©ponse de l'IA<br>"
            "3. üîß Appuyez sur F12 pour ouvrir les outils<br>"
            "4. üéØ Clic droit sur la zone de r√©ponse ‚Üí Inspecter<br>"
            "5. üìã Clic droit sur l'√©l√©ment HTML ‚Üí Copy ‚Üí Copy element<br>"
            "6. üì• Collez le HTML ci-dessous et validez"
        )
        instructions.setWordWrap(True)
        instructions.setStyleSheet("color: #2196F3; font-size: 11px;")
        guide_layout.addWidget(instructions)

        right_column.addWidget(guide_group)

        # === Zone HTML ===
        html_group = QtWidgets.QGroupBox("üìù HTML de la zone de r√©ponse")
        html_group.setStyleSheet(PlatformConfigStyle.get_group_box_style())
        html_layout = QtWidgets.QVBoxLayout(html_group)

        self.html_input = QtWidgets.QTextEdit()
        self.html_input.setPlaceholderText("Collez ici le HTML copi√© depuis la console (F12)...")
        self.html_input.setMaximumHeight(100)
        self.html_input.setStyleSheet(PlatformConfigStyle.get_input_style())
        html_layout.addWidget(self.html_input)

        # Boutons HTML
        html_buttons_layout = QtWidgets.QHBoxLayout()

        self.validate_html_button = QtWidgets.QPushButton("‚úÖ Valider HTML")
        self.validate_html_button.setStyleSheet(PlatformConfigStyle.get_button_style())
        self.validate_html_button.clicked.connect(self._on_validate_html)
        html_buttons_layout.addWidget(self.validate_html_button)

        self.clear_html_button = QtWidgets.QPushButton("üóëÔ∏è Effacer")
        self.clear_html_button.setStyleSheet(PlatformConfigStyle.get_button_style())
        self.clear_html_button.clicked.connect(lambda: self.html_input.clear())
        html_buttons_layout.addWidget(self.clear_html_button)

        html_layout.addLayout(html_buttons_layout)
        right_column.addWidget(html_group)

        # === Validation et Preview ===
        result_group = QtWidgets.QGroupBox("üìã R√©sultat et validation")
        result_group.setStyleSheet(PlatformConfigStyle.get_group_box_style())
        result_layout = QtWidgets.QVBoxLayout(result_group)

        # Status validation
        self.validation_status = QtWidgets.QLabel("En attente de HTML...")
        self.validation_status.setAlignment(Qt.AlignCenter)
        self.validation_status.setStyleSheet(PlatformConfigStyle.get_status_normal_style())
        self.validation_status.setWordWrap(True)
        result_layout.addWidget(self.validation_status)

        # Preview du texte extrait
        self.extracted_text_preview = QtWidgets.QTextEdit()
        self.extracted_text_preview.setReadOnly(True)
        self.extracted_text_preview.setMaximumHeight(120)
        self.extracted_text_preview.setStyleSheet(
            "background-color: #f8f8f8; border: 1px solid #ddd; padding: 5px;"
        )
        self.extracted_text_preview.setPlaceholderText("Le texte extrait appara√Ætra ici...")
        result_layout.addWidget(self.extracted_text_preview)

        right_column.addWidget(result_group)

        # === Configuration d'extraction ===
        extraction_group = QtWidgets.QGroupBox("‚öôÔ∏è Configuration d'extraction")
        extraction_group.setStyleSheet(PlatformConfigStyle.get_group_box_style())
        extraction_layout = QtWidgets.QFormLayout(extraction_group)

        # M√©thode d'extraction
        self.extraction_method_combo = QtWidgets.QComboBox()
        self.extraction_method_combo.addItems(
            ["Console HTML (Recommand√©)", "Presse-papiers (Ctrl+A, Ctrl+C)", "Reconnaissance de texte (OCR)"])
        self.extraction_method_combo.setStyleSheet(PlatformConfigStyle.get_input_style())
        extraction_layout.addRow("M√©thode:", self.extraction_method_combo)

        # Attente apr√®s d√©tection
        self.wait_extraction_spin = QtWidgets.QDoubleSpinBox()
        self.wait_extraction_spin.setRange(2.0, 10.0)
        self.wait_extraction_spin.setValue(3.0)
        self.wait_extraction_spin.setSingleStep(0.5)
        self.wait_extraction_spin.setDecimals(1)
        self.wait_extraction_spin.setSuffix(" secondes")
        self.wait_extraction_spin.setStyleSheet(PlatformConfigStyle.get_input_style())
        extraction_layout.addRow("Attente r√©ponse IA:", self.wait_extraction_spin)

        right_column.addWidget(extraction_group)

        # Spacer pour √©quilibrer
        right_column.addStretch(1)

        # ========================
        # ASSEMBLAGE DES COLONNES
        # ========================

        # Ajouter les colonnes au layout principal
        left_widget = QtWidgets.QWidget()
        left_widget.setLayout(left_column)
        left_widget.setMaximumWidth(320)  # Largeur fixe pour la colonne gauche

        right_widget = QtWidgets.QWidget()
        right_widget.setLayout(right_column)

        main_layout.addWidget(left_widget)
        main_layout.addWidget(right_widget, 1)  # Stretch factor pour expandre

    # ====================================================================
    # NOUVELLE LOGIQUE - AUTOMATISATION INTELLIGENTE + EXTRACTION HTML
    # ====================================================================

    def _on_auto_test(self):
        """Lance le test automatique avec positionnement de la zone de r√©ponse"""
        if not self.current_platform:
            QtWidgets.QMessageBox.warning(
                self,
                "Aucune plateforme s√©lectionn√©e",
                "Veuillez d'abord s√©lectionner une plateforme."
            )
            return

        # V√©rifier la configuration minimale
        browser_info = self.current_profile.get('browser', {})
        browser_type = browser_info.get('type', 'Chrome')
        browser_url = browser_info.get('url', '')

        if not browser_url:
            QtWidgets.QMessageBox.warning(
                self,
                "Configuration incompl√®te",
                "URL du navigateur manquante. Configurez d'abord le navigateur."
            )
            return

        # V√©rifier les positions prompt/submit
        positions = self.current_profile.get('interface_positions', {})
        if not positions.get('prompt_field') or not positions.get('submit_button'):
            QtWidgets.QMessageBox.warning(
                self,
                "Configuration incompl√®te",
                "Positions du champ de prompt et bouton submit manquantes."
            )
            return

        try:
            # Instancier les contr√¥leurs pour l'automatisation
            from core.interaction.mouse import MouseController
            from core.interaction.keyboard import KeyboardController

            mouse_controller = MouseController()
            keyboard_controller = KeyboardController()

            # Cr√©er le syst√®me d'automatisation
            self.state_automation = StateBasedAutomation(
                self.conductor.detector,
                mouse_controller,
                keyboard_controller,
                self.conductor
            )

            # Connecter les signaux
            self.state_automation.state_changed.connect(self._on_automation_state_changed)
            self.state_automation.automation_completed.connect(self._on_automation_completed)

            # Pr√©parer l'interface
            self.auto_test_button.setEnabled(False)
            self.capture_status.setText("üöÄ Test automatique en cours...")
            self.capture_status.setStyleSheet(PlatformConfigStyle.get_status_normal_style())

            # D√©marrer l'automatisation avec prompt test
            self.state_automation.start_test_automation(
                self.current_profile,
                3,  # 3 tabulations par d√©faut
                browser_type,
                browser_url
            )

        except ImportError as e:
            logger.error(f"Erreur d'importation contr√¥leurs: {str(e)}")
            QtWidgets.QMessageBox.critical(
                self,
                "Erreur",
                "Contr√¥leurs d'interaction non disponibles."
            )
            self.auto_test_button.setEnabled(True)
        except Exception as e:
            logger.error(f"Erreur d√©marrage automatisation: {str(e)}")
            QtWidgets.QMessageBox.critical(
                self,
                "Erreur",
                f"√âchec du d√©marrage: {str(e)}"
            )
            self.auto_test_button.setEnabled(True)

    def _on_automation_state_changed(self, state, message):
        """Callback pour les changements d'√©tat du test automatique"""
        self.capture_status.setText(f"üîÑ {message}")
        self.capture_status.setStyleSheet(PlatformConfigStyle.get_status_normal_style())
        QtWidgets.QApplication.processEvents()

    def _on_automation_completed(self, success, message, duration):
        """Callback pour la fin de l'automatisation"""
        self.auto_test_button.setEnabled(True)

        if success:
            self.capture_status.setText(f"‚úÖ Test r√©ussi - Attendez la r√©ponse IA")
            self.capture_status.setStyleSheet(PlatformConfigStyle.get_status_success_style())

            # Activer le bouton d'extraction HTML
            self.html_extract_button.setEnabled(True)

            QtWidgets.QMessageBox.information(
                self,
                "Test automatique r√©ussi",
                f"üéâ Test r√©ussi en {duration:.1f}s !<br><br>"
                f"Maintenant :<br>"
                f"1. Attendez la r√©ponse de l'IA<br>"
                f"2. Utilisez 'Extraire via Console HTML'"
            )
        else:
            self.capture_status.setText(f"‚ùå Erreur: {message}")
            self.capture_status.setStyleSheet(PlatformConfigStyle.get_status_error_style())
            QtWidgets.QMessageBox.critical(
                self,
                "Erreur de test",
                f"Erreur pendant le test automatique :<br>{message}"
            )

    def _on_html_extraction(self):
        """Guide l'utilisateur pour l'extraction HTML"""
        if not self.current_platform:
            QtWidgets.QMessageBox.warning(
                self,
                "Aucune plateforme s√©lectionn√©e",
                "Veuillez d'abord s√©lectionner une plateforme."
            )
            return

        # Instructions d√©taill√©es
        reply = QtWidgets.QMessageBox.information(
            self,
            "üîß Guide extraction HTML",
            "<b>Suivez ces √©tapes :</b><br><br>"
            "1. üéØ <b>Assurez-vous que l'IA a r√©pondu</b><br>"
            "2. üîß <b>Appuyez sur F12</b> (ouvre les outils d√©veloppeur)<br>"
            "3. üéØ <b>Clic droit sur la zone de r√©ponse</b> ‚Üí Inspecter<br>"
            "4. üìã <b>Dans l'inspecteur :</b> Clic droit sur l'√©l√©ment HTML ‚Üí Copy ‚Üí Copy element<br>"
            "5. üì• <b>Collez le HTML</b> dans la zone de texte ci-dessous<br>"
            "6. ‚úÖ <b>Cliquez 'Valider HTML'</b><br><br>"
            "<i>Cette m√©thode est 100% pr√©cise !</i>",
            QtWidgets.QMessageBox.Ok
        )

        # Focus sur la zone HTML
        self.html_input.setFocus()

    def _on_validate_html(self):
        """Valide le HTML et extrait le texte"""
        html_content = self.html_input.toPlainText().strip()

        if not html_content:
            QtWidgets.QMessageBox.warning(
                self,
                "HTML manquant",
                "Veuillez coller le HTML dans la zone de texte."
            )
            return

        try:
            # Valider la structure HTML
            is_valid, validation_message = self._validate_html_structure(html_content)

            if not is_valid:
                self.validation_status.setText(f"‚ùå {validation_message}")
                self.validation_status.setStyleSheet(PlatformConfigStyle.get_status_error_style())
                QtWidgets.QMessageBox.warning(
                    self,
                    "HTML invalide",
                    f"Probl√®me avec le HTML :\n{validation_message}"
                )
                return

            # Extraire le texte
            extracted_text = self.conductor.detector.extract_text_from_html(html_content)

            if not extracted_text:
                self.validation_status.setText("‚ùå Aucun texte extrait")
                self.validation_status.setStyleSheet(PlatformConfigStyle.get_status_error_style())
                QtWidgets.QMessageBox.warning(
                    self,
                    "Extraction √©chou√©e",
                    "Aucun texte n'a pu √™tre extrait du HTML."
                )
                return

            # Afficher le r√©sultat
            self.extracted_text_preview.setPlainText(extracted_text)
            self.validation_status.setText("‚úÖ HTML valid√© - Texte extrait avec succ√®s")
            self.validation_status.setStyleSheet(PlatformConfigStyle.get_status_success_style())

            # M√©moriser la position si demand√©
            if self.remember_position_check.isChecked():
                self._save_html_extraction_config(html_content, extracted_text)

            # √âmettre le signal
            self.response_received.emit(self.current_platform, extracted_text)

            QtWidgets.QMessageBox.information(
                self,
                "Extraction r√©ussie",
                f"‚úÖ Texte extrait avec succ√®s !<br><br>"
                f"Longueur : {len(extracted_text)} caract√®res<br>"
                f"Configuration {'sauvegard√©e' if self.remember_position_check.isChecked() else 'temporaire'}"
            )

        except Exception as e:
            logger.error(f"Erreur validation HTML: {str(e)}")
            self.validation_status.setText(f"‚ùå Erreur: {str(e)}")
            self.validation_status.setStyleSheet(PlatformConfigStyle.get_status_error_style())
            QtWidgets.QMessageBox.critical(
                self,
                "Erreur",
                f"Erreur lors de la validation :\n{str(e)}"
            )

    def _validate_html_structure(self, html_content):
        """
        Valide la structure HTML selon les crit√®res d√©finis
        Args:
            html_content (str): HTML √† valider
        Returns:
            tuple: (bool, str) - (is_valid, message)
        """
        try:
            # V√©rifications basiques
            if len(html_content) < 10:
                return False, "HTML trop court"

            # V√©rifier qu'il y a des balises
            if '<' not in html_content or '>' not in html_content:
                return False, "Format HTML invalide"

            # Logique de validation : balises ouvrantes/fermantes
            import re

            # Extraire toutes les balises
            opening_tags = re.findall(r'<([a-zA-Z][a-zA-Z0-9]*)[^>]*>', html_content)
            closing_tags = re.findall(r'</([a-zA-Z][a-zA-Z0-9]*)>', html_content)

            # Validation sp√©cifique : si plusieurs <p>, v√©rifier la fin
            p_count = html_content.count('<p')
            if p_count > 1:
                # Chercher la balise suivant le dernier </p>
                last_p_pos = html_content.rfind('</p>')
                if last_p_pos != -1:
                    remaining_html = html_content[last_p_pos + 4:].strip()
                    if remaining_html:
                        next_tag_match = re.search(r'<(/?)([a-zA-Z][a-zA-Z0-9]*)', remaining_html)
                        if next_tag_match:
                            tag_name = next_tag_match.group(2).lower()
                            if tag_name not in ['div', 'span', 'article', 'section']:
                                return False, f"Balise apr√®s dernier <p> non valide: {tag_name}"

            # V√©rification g√©n√©rale des balises √©quilibr√©es
            tag_balance = {}
            for tag in opening_tags:
                tag_balance[tag] = tag_balance.get(tag, 0) + 1
            for tag in closing_tags:
                tag_balance[tag] = tag_balance.get(tag, 0) - 1

            unbalanced = [tag for tag, count in tag_balance.items() if count != 0]
            if unbalanced:
                return False, f"Balises non √©quilibr√©es: {', '.join(unbalanced)}"

            return True, "HTML valid√© avec succ√®s"

        except Exception as e:
            return False, f"Erreur validation: {str(e)}"

    def _save_html_extraction_config(self, html_content, extracted_text):
        """Sauvegarde la configuration d'extraction HTML"""
        try:
            if 'extraction_config' not in self.current_profile:
                self.current_profile['extraction_config'] = {}

            self.current_profile['extraction_config']['response_area'] = {
                'method': 'html',
                'sample_html': html_content[:500],  # √âchantillon pour r√©f√©rence
                'sample_text': extracted_text[:200],  # √âchantillon du texte
                'configured_at': time.time(),
                'wait_time': self.wait_extraction_spin.value()
            }

            # Sauvegarder en BDD
            self._save_profile()

        except Exception as e:
            logger.error(f"Erreur sauvegarde config HTML: {str(e)}")

    # ====================================================================
    # M√âTHODES CONSERV√âES (compatibilit√© et fonctionnalit√©s de base)
    # ====================================================================

    def set_profiles(self, profiles):
        """Met √† jour les profils disponibles dans le widget"""
        self.profiles = profiles
        self._update_platform_combo()

    def select_platform(self, platform_name):
        """S√©lectionne une plateforme dans la liste d√©roulante"""
        index = self.platform_combo.findText(platform_name)
        if index >= 0:
            self.platform_combo.setCurrentIndex(index)

    def refresh(self):
        """Actualise les donn√©es du widget"""
        self._update_platform_combo()
        if self.current_platform:
            self._load_platform_config(self.current_platform)

    def _update_platform_combo(self):
        """Met √† jour la liste d√©roulante des plateformes"""
        current_text = self.platform_combo.currentText()
        self.platform_combo.clear()
        self.platform_combo.addItem("-- S√©lectionnez une plateforme --")
        for name in sorted(self.profiles.keys()):
            self.platform_combo.addItem(name)
        if current_text:
            index = self.platform_combo.findText(current_text)
            if index >= 0:
                self.platform_combo.setCurrentIndex(index)

    def _on_platform_selected(self, index):
        """G√®re la s√©lection d'une plateforme dans la liste"""
        if index <= 0:
            self.current_platform = None
            self.current_profile = None
            return
        platform_name = self.platform_combo.currentText()
        self._load_platform_config(platform_name)

    def _load_platform_config(self, platform_name):
        """Charge la configuration de la plateforme s√©lectionn√©e"""
        self.current_platform = platform_name
        self.current_profile = self.profiles.get(platform_name, {})

        if not self.current_profile:
            print(f"DEBUG: Profil vide pour {platform_name}!")
            return

        # Charger la configuration d'extraction
        extraction_config = self.current_profile.get('extraction_config', {})
        response_config = extraction_config.get('response_area', {})

        # M√©thode d'extraction
        method = response_config.get('method', 'html')
        if method == 'html':
            self.extraction_method_combo.setCurrentIndex(0)
        elif method == 'clipboard':
            self.extraction_method_combo.setCurrentIndex(1)
        else:
            self.extraction_method_combo.setCurrentIndex(2)  # OCR

        # Temps d'attente
        self.wait_extraction_spin.setValue(response_config.get('wait_time', 3.0))

        # V√©rifier si la configuration existe
        if response_config:
            self.capture_status.setText("‚úÖ Configuration sauvegard√©e")
            self.capture_status.setStyleSheet(PlatformConfigStyle.get_status_success_style())

            # Si config HTML existe, activer l'extraction
            if response_config.get('method') == 'html':
                self.html_extract_button.setEnabled(True)
        else:
            self.capture_status.setText("‚ö†Ô∏è Aucune configuration")
            self.capture_status.setStyleSheet(PlatformConfigStyle.get_status_normal_style())

    def _on_save_config(self):
        """Enregistre la configuration de la zone de r√©ponse"""
        if not self.current_platform:
            QtWidgets.QMessageBox.warning(
                self,
                "Aucune plateforme s√©lectionn√©e",
                "Veuillez d'abord s√©lectionner une plateforme."
            )
            return

        try:
            # V√©rifier qu'on a une configuration d'extraction
            extraction_config = self.current_profile.get('extraction_config', {})
            if not extraction_config.get('response_area'):
                QtWidgets.QMessageBox.warning(
                    self,
                    "Configuration manquante",
                    "Aucune configuration d'extraction. Effectuez d'abord le test et l'extraction HTML."
                )
                return

            # Mettre √† jour les param√®tres
            response_config = extraction_config['response_area']

            # M√©thode
            method_index = self.extraction_method_combo.currentIndex()
            if method_index == 0:
                response_config['method'] = 'html'
            elif method_index == 1:
                response_config['method'] = 'clipboard'
            else:
                response_config['method'] = 'ocr'

            # Temps d'attente
            response_config['wait_time'] = self.wait_extraction_spin.value()

            # Sauvegarder
            success = self._save_profile()

            if success:
                self.response_area_configured.emit(self.current_platform, response_config)
                QtWidgets.QMessageBox.information(
                    self,
                    "Configuration enregistr√©e",
                    f"Configuration d'extraction pour {self.current_platform} sauvegard√©e avec succ√®s."
                )
            else:
                QtWidgets.QMessageBox.critical(
                    self,
                    "Erreur d'enregistrement",
                    "Impossible d'enregistrer la configuration."
                )

        except Exception as e:
            logger.error(f"Erreur lors de l'enregistrement: {str(e)}")
            QtWidgets.QMessageBox.critical(
                self,
                "Erreur",
                f"Une erreur est survenue lors de l'enregistrement: {str(e)}"
            )

    def _save_profile(self):
        """Sauvegarde le profil dans le syst√®me"""
        if not self.current_platform or not self.current_profile:
            return False

        try:
            # M√©thode 1: Utiliser la base de donn√©es
            if hasattr(self.conductor, 'database') and self.conductor.database:
                if hasattr(self.conductor.database, 'save_platform'):
                    try:
                        success = self.conductor.database.save_platform(self.current_platform, self.current_profile)
                        print(f"DEBUG: Sauvegarde du profil dans la DB: {success}")
                        if success:
                            return True
                    except Exception as e:
                        print(f"DEBUG: Erreur sauvegarde DB: {str(e)}")

            # M√©thode 2: Utiliser le provider de configuration
            if hasattr(self.config_provider, 'save_profile'):
                try:
                    success = self.config_provider.save_profile(self.current_platform, self.current_profile)
                    print(f"DEBUG: Sauvegarde du profil via ConfigProvider: {success}")
                    if success:
                        return True
                except Exception as e:
                    print(f"DEBUG: Erreur sauvegarde ConfigProvider: {str(e)}")

            # M√©thode 3: Sauvegarde directe dans un fichier (fallback)
            profiles_dir = getattr(self.config_provider, 'profiles_dir', 'config/profiles')
            os.makedirs(profiles_dir, exist_ok=True)

            file_path = os.path.join(profiles_dir, f"{self.current_platform}.json")
            with open(file_path, "w", encoding="utf-8") as f:
                json.dump(self.current_profile, f, indent=2, ensure_ascii=False)

            print(f"DEBUG: Profil {self.current_platform} sauvegard√© directement dans {file_path}")

            # Mettre √† jour le cache global des profils
            self.profiles[self.current_platform] = self.current_profile

            return True

        except Exception as e:
            logger.error(f"Erreur lors de la sauvegarde du profil: {str(e)}")
            print(f"DEBUG: Erreur globale sauvegarde profil: {str(e)}")
            return False