#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
ui/widgets/emergency_stop_overlay.py - Bouton STOP en overlay absolu AM√âLIOR√â

Bouton d'arr√™t d'urgence avec design am√©lior√© et arr√™t propre
Position fixe en haut √† droite de l'√©cran
"""


import sys
import time
from PyQt5 import QtWidgets, QtCore, QtGui
from PyQt5.QtCore import Qt, pyqtSignal, QTimer, QPropertyAnimation, QEasingCurve
from PyQt5.QtGui import QFont, QColor, QPainter, QBrush, QPen, QLinearGradient
from utils.logger import logger


class EmergencyStopOverlay(QtWidgets.QWidget):
    """Bouton STOP en overlay absolu sur l'√©cran avec design am√©lior√©"""

    # Signal √©mis quand le bouton est cliqu√©
    emergency_stop_requested = pyqtSignal()

    def __init__(self, conductor=None, state_automation=None, parent=None):
        super().__init__(parent)
        self.conductor = conductor
        self.state_automation = state_automation
        self.is_visible = False
        self.is_stopping = False  # Nouveau flag pour √©viter les double-clics

        # Animation de pulsation
        self.pulse_animation = None
        self.opacity_effect = None

        self._setup_overlay_window()
        self._create_stop_button()
        self._setup_animations()
        self._position_top_right()

        logger.info("Bouton STOP overlay am√©lior√© cr√©√©")

    def _setup_overlay_window(self):
        """Configure la fen√™tre overlay avec taille augment√©e pour le nouveau padding"""
        # Flags pour overlay absolu
        self.setWindowFlags(
            Qt.WindowStaysOnTopHint |  # Toujours au-dessus
            Qt.FramelessWindowHint |  # Pas de barre de titre
            Qt.Tool |  # Ne prend pas le focus
            Qt.WindowDoesNotAcceptFocus  # N'accepte jamais le focus
        )

        # Fond semi-transparent
        self.setAttribute(Qt.WA_TranslucentBackground)

        # Taille augment√©e pour accommoder le nouveau padding
        self.setFixedSize(180, 110)  # Augment√© pour le padding suppl√©mentaire

        # Ne pas appara√Ætre dans la barre des t√¢ches
        self.setWindowFlag(Qt.WindowDoesNotAcceptFocus, True)

    def _create_stop_button(self):
        """Cr√©e le bouton STOP avec design am√©lior√© et padding augment√©"""
        layout = QtWidgets.QVBoxLayout(self)
        layout.setContentsMargins(12, 12, 12, 12)  # Augment√© les marges du layout

        # Bouton STOP principal avec padding augment√©
        self.stop_btn = QtWidgets.QPushButton("üõë STOP")
        self.stop_btn.setFont(QFont("Arial", 14, QFont.Bold))

        # Style am√©lior√© avec padding consid√©rablement augment√©
        self.stop_btn.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #FF6666, stop:1 #FF3333);
                color: white;
                border: 4px solid #FFFFFF;
                border-radius: 12px;
                padding: 24px 32px;
                font-weight: bold;
                font-size: 16px;
                font-family: Arial, sans-serif;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.8);
                box-shadow: 0px 4px 8px rgba(0,0,0,0.3);
                min-height: 50px;
                min-width: 120px;
                margin: 4px;
            }
            QPushButton:hover { 
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #FF4444, stop:1 #FF1111);
                border: 4px solid #FFFF00;
                padding: 24px 32px;
                transform: scale(1.05);
            }
            QPushButton:pressed { 
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #CC0000, stop:1 #990000);
                border: 4px solid #FFFF00;
                padding: 24px 32px;
            }
        """)
        self.stop_btn.clicked.connect(self._on_stop_clicked)
        layout.addWidget(self.stop_btn)

        # Label informatif avec espacement am√©lior√©
        self.info_label = QtWidgets.QLabel("Arr√™t d'urgence")
        self.info_label.setFont(QFont("Arial", 10, QFont.Bold))
        self.info_label.setStyleSheet("""
            color: white;
            font-size: 11px;
            font-weight: bold;
            background-color: rgba(0, 0, 0, 180);
            border-radius: 6px;
            padding: 6px 12px;
            text-align: center;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.8);
            margin-top: 4px;
        """)
        self.info_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.info_label)

    def _setup_animations(self):
        """Configure les animations de pulsation"""
        # Effet d'opacit√© pour l'animation
        self.opacity_effect = QtWidgets.QGraphicsOpacityEffect()
        self.stop_btn.setGraphicsEffect(self.opacity_effect)

        # Animation de pulsation
        self.pulse_animation = QPropertyAnimation(self.opacity_effect, b"opacity")
        self.pulse_animation.setDuration(1000)  # 1 seconde
        self.pulse_animation.setStartValue(0.7)
        self.pulse_animation.setEndValue(1.0)
        self.pulse_animation.setEasingCurve(QEasingCurve.InOutSine)
        self.pulse_animation.setLoopCount(-1)  # Boucle infinie

        # Timer pour d√©marrer la pulsation apr√®s un d√©lai
        self.pulse_timer = QTimer()
        self.pulse_timer.setSingleShot(True)
        self.pulse_timer.timeout.connect(self._start_pulse)

    def _start_pulse(self):
        """D√©marre l'animation de pulsation"""
        if self.pulse_animation and not self.is_stopping:
            self.pulse_animation.start()

    def _stop_pulse(self):
        """Arr√™te l'animation de pulsation"""
        if self.pulse_animation:
            self.pulse_animation.stop()
        if self.opacity_effect:
            self.opacity_effect.setOpacity(1.0)

    def _position_top_right(self):
        """Positionne le bouton en haut √† droite de l'√©cran"""
        # Obtenir la g√©om√©trie de l'√©cran principal
        screen = QtWidgets.QApplication.desktop().screenGeometry()

        # Position en haut √† droite avec marge
        margin = 15
        x = screen.width() - self.width() - margin
        y = margin

        self.move(x, y)
        logger.debug(f"Bouton STOP positionn√© √† ({x}, {y})")

    def _on_stop_clicked(self):
        """G√®re le clic sur STOP avec arr√™t propre"""
        if self.is_stopping:
            logger.warning("Arr√™t d√©j√† en cours, ignorer le clic")
            return

        self.is_stopping = True
        logger.warning("üõë BOUTON STOP OVERLAY ACTIV√â")

        # Arr√™ter l'animation de pulsation
        self._stop_pulse()

        # Animation visuelle de confirmation
        self._animate_stop_confirmation()

        # Ex√©cuter l'arr√™t d'urgence de mani√®re s√©curis√©e
        self._execute_emergency_stop_safe()

        # √âmettre le signal apr√®s l'arr√™t
        self.emergency_stop_requested.emit()

    def _animate_stop_confirmation(self):
        """Animation de confirmation du STOP avec padding maintenu"""
        try:
            # Changer temporairement le style pour confirmer le clic
            self.stop_btn.setStyleSheet("""
                QPushButton {
                    background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                        stop:0 #00FF66, stop:1 #00CC44);
                    color: black;
                    border: 4px solid #FFFFFF;
                    border-radius: 12px;
                    padding: 24px 32px;
                    font-weight: bold;
                    font-size: 16px;
                    text-shadow: 1px 1px 2px rgba(255,255,255,0.8);
                    box-shadow: 0px 4px 8px rgba(0,0,0,0.3);
                    min-height: 50px;
                    min-width: 120px;
                    margin: 4px;
                }
            """)
            self.stop_btn.setText("‚úÖ ARR√äT√â")
            self.info_label.setText("Arr√™t en cours...")
            self.info_label.setStyleSheet("""
                color: white;
                font-size: 11px;
                font-weight: bold;
                background-color: rgba(0, 150, 0, 180);
                border-radius: 6px;
                padding: 6px 12px;
                text-align: center;
                text-shadow: 1px 1px 2px rgba(0,0,0,0.8);
                margin-top: 4px;
            """)

            # Programmer le retour au style normal apr√®s 2 secondes
            QTimer.singleShot(2000, self._reset_button_style)

        except Exception as e:
            logger.debug(f"Erreur animation: {e}")

    def _reset_button_style(self):
        """Remet le style normal du bouton avec padding correct"""
        try:
            if not self.is_stopping:  # Ne pas reset si on est en train de s'arr√™ter
                self.stop_btn.setStyleSheet("""
                    QPushButton {
                        background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                            stop:0 #FF6666, stop:1 #FF3333);
                        color: white;
                        border: 4px solid #FFFFFF;
                        border-radius: 12px;
                        padding: 24px 32px;
                        font-weight: bold;
                        font-size: 16px;
                        font-family: Arial, sans-serif;
                        text-shadow: 2px 2px 4px rgba(0,0,0,0.8);
                        box-shadow: 0px 4px 8px rgba(0,0,0,0.3);
                        min-height: 50px;
                        min-width: 120px;
                        margin: 4px;
                    }
                    QPushButton:hover { 
                        background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                            stop:0 #FF4444, stop:1 #FF1111);
                        border: 4px solid #FFFF00;
                        padding: 24px 32px;
                    }
                    QPushButton:pressed { 
                        background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                            stop:0 #CC0000, stop:1 #990000);
                        border: 4px solid #FFFF00;
                        padding: 24px 32px;
                    }
                """)
                self.stop_btn.setText("üõë STOP")
                self.info_label.setText("Arr√™t d'urgence")
                self.info_label.setStyleSheet("""
                    color: white;
                    font-size: 11px;
                    font-weight: bold;
                    background-color: rgba(0, 0, 0, 180);
                    border-radius: 6px;
                    padding: 6px 12px;
                    text-align: center;
                    text-shadow: 1px 1px 2px rgba(0,0,0,0.8);
                    margin-top: 4px;
                """)

                # Red√©marrer la pulsation
                self.pulse_timer.start(2000)

            self.is_stopping = False
        except Exception as e:
            logger.debug(f"Erreur reset style: {e}")

    def _execute_emergency_stop_safe(self):
        """Ex√©cute l'arr√™t d'urgence de mani√®re s√©curis√©e"""
        logger.info("üö® D√©but arr√™t d'urgence s√©curis√©")

        try:
            # 1. Arr√™ter StateAutomation en premier
            if self.state_automation:
                try:
                    logger.info("Arr√™t StateAutomation...")
                    if hasattr(self.state_automation, 'stop_automation'):
                        self.state_automation.stop_automation()
                        time.sleep(0.3)  # Pause pour terminaison
                        if hasattr(self.state_automation, 'is_automation_running'):
                            if self.state_automation.is_automation_running():
                                logger.warning("StateAutomation toujours actif apr√®s arr√™t")
                        if hasattr(self.state_automation, 'force_stop'):
                            self.state_automation.force_stop = True
                    logger.info("‚úÖ StateAutomation arr√™t√©")
                except Exception as e:
                    logger.warning(f"Erreur arr√™t StateAutomation: {e}")

            # 2. Arr√™ter le Conductor
            if self.conductor:
                try:
                    logger.info("Arr√™t Conductor...")
                    if hasattr(self.conductor, 'emergency_stop'):
                        self.conductor.emergency_stop()
                        time.sleep(0.3)  # Pause pour terminaison
                        logger.info("‚úÖ Conductor.emergency_stop() appel√©")
                    elif hasattr(self.conductor, 'shutdown'):
                        self.conductor.shutdown()
                        time.sleep(0.3)  # Pause pour terminaison
                        logger.info("‚úÖ Conductor.shutdown() appel√©")
                    else:
                        if hasattr(self.conductor, '_shutdown'):
                            self.conductor._shutdown = True
                        if hasattr(self.conductor, 'browser_already_active'):
                            self.conductor.browser_already_active = False
                        logger.info("‚úÖ Flags d'arr√™t Conductor configur√©s")
                except Exception as e:
                    logger.warning(f"Erreur arr√™t Conductor: {e}")

            # 3. Fermer la console si ouverte
            try:
                import pyautogui
                pyautogui.press('f12')
                logger.debug("Console ferm√©e par overlay")
            except Exception as e:
                logger.debug(f"Erreur fermeture console (ignor√©e): {e}")

            logger.warning("üö® Arr√™t d'urgence s√©curis√© termin√©")

        except Exception as e:
            logger.error(f"Erreur arr√™t d'urgence s√©curis√©: {e}")

    # ==============================
    # API PUBLIQUE AM√âLIOR√âE
    # ==============================

    def show_overlay(self):
        """Affiche le bouton overlay avec animation"""
        if not self.is_visible:
            self._position_top_right()  # Re-calculer position
            self.show()
            self.raise_()  # S'assurer qu'il est au-dessus
            self.activateWindow()
            self.is_visible = True

            # D√©marrer la pulsation apr√®s 3 secondes
            self.pulse_timer.start(3000)

            logger.info("üõë Bouton STOP overlay affich√© avec animation")

    def hide_overlay(self):
        """Cache le bouton overlay et arr√™te les animations"""
        if self.is_visible:
            self._stop_pulse()
            self.pulse_timer.stop()
            self.hide()
            self.is_visible = False
            logger.info("Bouton STOP overlay cach√©")

    def update_references(self, conductor=None, state_automation=None):
        """Met √† jour les r√©f√©rences pour l'arr√™t d'urgence"""
        if conductor:
            self.conductor = conductor
            logger.debug("R√©f√©rence conductor mise √† jour")
        if state_automation:
            self.state_automation = state_automation
            logger.debug("R√©f√©rence state_automation mise √† jour")

    def is_overlay_visible(self):
        """Retourne si l'overlay est visible"""
        return self.is_visible

    # ==============================
    # √âV√âNEMENTS SYST√àME AM√âLIOR√âS
    # ==============================

    def paintEvent(self, event):
        """Dessine un fond semi-transparent avec effet de glow"""
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)

        # Fond semi-transparent arrondi avec gradient
        rect = self.rect()

        # Gradient pour l'effet de profondeur
        gradient = QLinearGradient(0, 0, 0, rect.height())
        gradient.setColorAt(0, QColor(0, 0, 0, 120))
        gradient.setColorAt(1, QColor(0, 0, 0, 160))

        painter.setBrush(QBrush(gradient))
        painter.setPen(QPen(QColor(255, 255, 255, 220), 3))
        painter.drawRoundedRect(rect.adjusted(1, 1, -1, -1), 12, 12)

    def mousePressEvent(self, event):
        """G√®re le clic pour d√©placer le bouton"""
        if event.button() == Qt.LeftButton:
            self.drag_start_position = event.globalPos()

    def mouseMoveEvent(self, event):
        """Permet de d√©placer le bouton overlay"""
        if hasattr(self, 'drag_start_position'):
            if event.buttons() == Qt.LeftButton:
                # Calculer la nouvelle position
                diff = event.globalPos() - self.drag_start_position
                new_pos = self.pos() + diff

                # Limiter aux bords de l'√©cran
                screen = QtWidgets.QApplication.desktop().screenGeometry()
                new_x = max(0, min(new_pos.x(), screen.width() - self.width()))
                new_y = max(0, min(new_pos.y(), screen.height() - self.height()))

                self.move(new_x, new_y)
                self.drag_start_position = event.globalPos()

    def closeEvent(self, event):
        """Emp√™che la fermeture accidentelle et nettoie les animations"""
        event.ignore()  # Ignore la fermeture
        self.hide_overlay()


# ==============================
# EXEMPLE D'UTILISATION AM√âLIOR√â
# ==============================

def demo_emergency_overlay():
    """D√©mo du bouton STOP overlay am√©lior√©"""
    app = QtWidgets.QApplication(sys.argv)

    # Cr√©er le bouton overlay
    overlay = EmergencyStopOverlay()

    # Connecter le signal
    def on_emergency_stop():
        print("üõë ARR√äT D'URGENCE ACTIV√â !")
        QtWidgets.QMessageBox.information(None, "STOP",
                                          "Arr√™t d'urgence activ√© depuis l'overlay am√©lior√© !\n\n"
                                          "Le syst√®me a √©t√© arr√™t√© proprement.")

    overlay.emergency_stop_requested.connect(on_emergency_stop)

    # Afficher l'overlay
    overlay.show_overlay()

    # Fen√™tre principale pour tester
    main_window = QtWidgets.QMainWindow()
    main_window.setWindowTitle("Test avec bouton STOP overlay am√©lior√©")
    main_window.resize(800, 500)

    central = QtWidgets.QWidget()
    layout = QtWidgets.QVBoxLayout(central)

    # Titre
    title = QtWidgets.QLabel("Test du Bouton STOP Am√©lior√©")
    title.setFont(QFont("Arial", 18, QFont.Bold))
    title.setAlignment(Qt.AlignCenter)
    title.setStyleSheet("color: #333; margin: 20px;")
    layout.addWidget(title)

    # Informations
    info = QtWidgets.QLabel(
        "‚Ä¢ Le bouton STOP est en haut √† droite de l'√©cran\n"
        "‚Ä¢ Il pulse pour attirer l'attention\n"
        "‚Ä¢ Design am√©lior√© avec meilleur contraste\n"
        "‚Ä¢ Arr√™t s√©curis√© du conductor\n"
        "‚Ä¢ Vous pouvez le d√©placer en cliquant-glissant\n"
        "‚Ä¢ Padding augment√© pour meilleure lisibilit√©"
    )
    info.setFont(QFont("Arial", 12))
    info.setStyleSheet("color: #555; padding: 20px; background: #f0f0f0; border-radius: 8px;")
    layout.addWidget(info)

    # Boutons de contr√¥le
    controls_layout = QtWidgets.QHBoxLayout()

    toggle_btn = QtWidgets.QPushButton("Masquer/Afficher bouton STOP")
    toggle_btn.setFont(QFont("Arial", 12))
    toggle_btn.setStyleSheet("""
        QPushButton {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            font-weight: bold;
        }
        QPushButton:hover {
            background: #45a049;
        }
    """)
    toggle_btn.clicked.connect(
        lambda: overlay.hide_overlay() if overlay.is_overlay_visible() else overlay.show_overlay())
    controls_layout.addWidget(toggle_btn)

    layout.addLayout(controls_layout)
    layout.addStretch()

    main_window.setCentralWidget(central)
    main_window.show()

    sys.exit(app.exec_())


if __name__ == "__main__":
    demo_emergency_overlay()