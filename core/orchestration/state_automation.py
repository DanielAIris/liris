#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
core/orchestration/state_automation.py - VERSION CORRIG√âE EXTRACTION

Corrections principales:
- Simple clic au lieu de double clic
- Optimisation temps d'attente
- Focus par clic sans changement de fen√™tre
- Gestion correcte console sans force_focus
- üéØ CORRECTION MAJEURE: Utilisation de extraction_config.response_area pour l'extraction
- üîß CORRECTION FIREFOX: Ctrl+Entr√©e et r√©cup√©ration r√©sultat console
- üéâ CORRECTION COPY: Utilisation copy() directe au lieu de text;
"""

import time
import json
import pyperclip
from enum import Enum
from PyQt5.QtCore import QObject, pyqtSignal
from utils.logger import logger
from utils.exceptions import OrchestrationError

try:
    import pygetwindow as gw

    HAS_PYGETWINDOW = True
except ImportError:
    HAS_PYGETWINDOW = False


class StateBasedAutomation(QObject):
    """Automatisation optimis√©e avec clic simple et temps rapides"""

    # Signaux pour communication externe
    step_completed = pyqtSignal(str, str)
    automation_completed = pyqtSignal(bool, str, float, str)
    automation_failed = pyqtSignal(str, str)

    def __init__(self, detector, mouse_controller, keyboard_controller, conductor):
        super().__init__()
        self.detector = detector
        self.mouse_controller = mouse_controller
        self.keyboard_controller = keyboard_controller
        self.conductor = conductor

        # √âtat simple
        self.is_running = False
        self.force_stop = False
        self.start_time = None

        # Configuration
        self.platform_profile = None
        self.test_text = ""
        self.skip_browser_activation = False
        self.extracted_response = ""
        self.browser_type = "chrome"  # Par d√©faut

        logger.info("StateBasedAutomation OPTIMIS√â initialis√©")

    def start_test_automation(self, platform_profile, num_tabs, browser_type, url, automation_params=None):
        """D√©marre l'automatisation optimis√©e"""
        if self.is_running:
            logger.warning("Automatisation d√©j√† en cours")
            return

        logger.info(f"üöÄ D√âMARRAGE automatisation pour {platform_profile.get('name', 'Unknown')}")

        # Configuration
        self.platform_profile = platform_profile
        self.browser_type = browser_type or "chrome"
        self.test_text = (automation_params or {}).get('test_text', 'Test automatis√©')
        self.skip_browser_activation = (automation_params or {}).get('skip_browser_activation', False)
        self.extracted_response = ""

        # √âtat
        self.is_running = True
        self.force_stop = False
        self.start_time = time.time()

        # EX√âCUTION DIRECTE
        try:
            self._execute_automation_sequence()
        except Exception as e:
            self._handle_automation_failure(f"Erreur s√©quence: {str(e)}")

    def _execute_automation_sequence(self):
        """Ex√©cute toute la s√©quence d'automatisation OPTIMIS√âE"""
        logger.info("üìã D√©but s√©quence automatisation OPTIMIS√âE")

        try:
            # √âTAPE 1: Focus navigateur PAR CLIC
            if not self._ensure_browser_focus():
                return

            # √âTAPE 2: Cliquer champ (SIMPLE CLIC)
            if not self._handle_field_click_step():
                return

            # √âTAPE 3: Effacer champ
            if not self._handle_field_clear_step():
                return

            # √âTAPE 4: Saisir texte
            if not self._handle_text_input_step():
                return

            # √âTAPE 5: Soumettre
            if not self._handle_form_submit_step():
                return

            # √âTAPE 6: Attendre r√©ponse IA (OPTIMIS√â)
            if not self._handle_response_wait_step():
                return

            # √âTAPE 7: Extraire r√©ponse
            if not self._handle_response_extract_step():
                return

            # SUCC√àS FINAL
            self._handle_automation_success()

        except Exception as e:
            self._handle_automation_failure(f"Erreur dans s√©quence: {str(e)}")

    def _ensure_browser_focus(self):
        """√âTAPE 1: S'assurer que le navigateur a le focus PAR CLIC SIMPLE"""
        if self.force_stop:
            return False

        logger.info("üåê √âTAPE 1: Focus navigateur par clic simple")
        self.step_completed.emit("browser_focusing", "Focus navigateur")

        try:
            # Si skip demand√©, on suppose que le conductor a d√©j√† g√©r√©
            if self.skip_browser_activation:
                logger.info("üîÑ Skip focus - Conductor a d√©j√† g√©r√©")
                time.sleep(0.3)  # Plus rapide
                return True

            # M√âTHODE OPTIMIS√âE: Clic simple au centre
            logger.info("üñ±Ô∏è Clic simple pour focus navigateur")

            # Position par d√©faut optimis√©e
            try:
                import tkinter as tk
                root = tk.Tk()
                screen_width = root.winfo_screenwidth()
                screen_height = root.winfo_screenheight()
                root.destroy()

                # Zone centre s√©curis√©e
                click_x = screen_width // 2
                click_y = 200  # Plus bas pour √©viter les onglets
            except:
                click_x = 960
                click_y = 200

            # UN SEUL CLIC
            self.mouse_controller.click(click_x, click_y)
            time.sleep(0.2)  # Plus rapide

            logger.info(f"‚úÖ Clic simple effectu√© √† ({click_x}, {click_y})")
            return True

        except Exception as e:
            logger.error(f"Erreur focus navigateur: {e}")
            return True

    def _handle_field_click_step(self):
        """√âTAPE 2: Clic champ prompt (SIMPLE CLIC)"""
        if self.force_stop:
            return False

        logger.info("üéØ √âTAPE 2: Clic SIMPLE champ prompt")
        self.step_completed.emit("field_clicking", "Clic sur champ")

        try:
            positions = self.platform_profile.get('interface_positions', {})
            prompt_pos = positions.get('prompt_field')

            if not prompt_pos:
                self._handle_automation_failure("Position champ prompt manquante")
                return False

            x, y = prompt_pos['center_x'], prompt_pos['center_y']
            logger.info(f"üéØ Position cible: ({x}, {y})")

            # UN SEUL CLIC au lieu de double clic
            self.mouse_controller.click(x, y)
            time.sleep(0.2)  # Plus rapide

            logger.info("‚úÖ Clic simple effectu√©")
            return True

        except Exception as e:
            self._handle_automation_failure(f"Erreur clic champ: {str(e)}")
            return False

    def _handle_field_clear_step(self):
        """√âTAPE 3: Effacer champ OPTIMIS√â"""
        if self.force_stop:
            return False

        logger.info("üßπ √âTAPE 3: Effacement champ OPTIMIS√â")
        self.step_completed.emit("field_clearing", "Effacement champ")

        try:
            # M√©thode rapide: Ctrl+A puis Delete
            self.keyboard_controller.hotkey('ctrl', 'a')
            time.sleep(0.1)
            self.keyboard_controller.press_key('delete')
            time.sleep(0.1)

            logger.info("‚úÖ Effacement rapide par Ctrl+A")
            return True

        except Exception as e:
            self._handle_automation_failure(f"Erreur effacement: {str(e)}")
            return False

    def _handle_text_input_step(self):
        """√âTAPE 4: Saisie texte OPTIMIS√âE"""
        if self.force_stop:
            return False

        logger.info("üìù √âTAPE 4: Saisie texte OPTIMIS√âE")
        self.step_completed.emit("text_typing", "Saisie texte")

        try:
            if not self.test_text:
                self._handle_automation_failure("Texte de test manquant")
                return False

            logger.info(f"üìù Saisie: '{self.test_text}' ({len(self.test_text)} caract√®res)")

            # M√©thode presse-papiers optimis√©e
            try:
                # Sauvegarder presse-papiers
                original_clipboard = pyperclip.paste()

                # Copier et coller
                pyperclip.copy(self.test_text)
                time.sleep(0.05)  # Plus rapide
                self.keyboard_controller.hotkey('ctrl', 'v')
                time.sleep(0.3)  # Plus rapide

                # Restaurer presse-papiers
                pyperclip.copy(original_clipboard)

                logger.info("‚úÖ Saisie rapide par presse-papiers")
                return True

            except Exception as e:
                logger.warning(f"Erreur presse-papiers: {e}, fallback saisie directe")
                self.keyboard_controller.type_text(self.test_text)
                time.sleep(0.5)
                return True

        except Exception as e:
            self._handle_automation_failure(f"Erreur saisie texte: {str(e)}")
            return False

    def _handle_form_submit_step(self):
        """√âTAPE 5: Soumission formulaire RAPIDE"""
        if self.force_stop:
            return False

        logger.info("üì§ √âTAPE 5: Soumission RAPIDE")
        self.step_completed.emit("form_submitting", "Soumission")

        try:
            # Soumission avec Entr√©e
            self.keyboard_controller.press_key('enter')
            time.sleep(0.5)  # Plus rapide

            logger.info("‚úÖ Formulaire soumis rapidement")
            return True

        except Exception as e:
            self._handle_automation_failure(f"Erreur soumission: {str(e)}")
            return False

    def _handle_response_wait_step(self):
        """√âTAPE 6: Attendre r√©ponse IA OPTIMIS√âE"""
        if self.force_stop:
            return False

        logger.info("üîç √âTAPE 6: Attente r√©ponse IA OPTIMIS√âE")
        self.step_completed.emit("response_waiting", "Attente r√©ponse")

        try:
            platform_name = self.platform_profile.get('name', '')

            # Calcul temps d'attente OPTIMIS√â
            wait_time = self._calculate_optimized_wait_time()
            logger.info(f"‚è±Ô∏è Temps d'attente OPTIMIS√â: {wait_time}s")

            # Utiliser le MutationObserver SAFE du conductor
            if hasattr(self.conductor, '_wait_for_ai_generation_mutation_observer'):
                logger.info(f"üîç Utilisation MutationObserver SAFE du Conductor (max {wait_time}s)")
                result = self.conductor._wait_for_ai_generation_mutation_observer(platform_name, wait_time)

                if result.get('detected'):
                    logger.info(f"‚úÖ R√©ponse IA d√©tect√©e RAPIDEMENT en {result.get('duration', 0):.1f}s")
                    return True
                else:
                    logger.info(f"‚è∞ Timeout MutationObserver apr√®s {wait_time}s - extraction imm√©diate")
                    return True
            else:
                # Fallback d√©lai COURT
                logger.info(f"Fallback d√©lai COURT {wait_time}s")
                time.sleep(wait_time)
                return True

        except Exception as e:
            logger.warning(f"Erreur attente r√©ponse: {str(e)} - continuation")
            return True

    def _calculate_optimized_wait_time(self):
        """Calcule un temps d'attente OPTIMIS√â et plus court"""
        try:
            if not self.test_text:
                return 5  # Plus court

            # Analyse RAPIDE du prompt
            char_count = len(self.test_text)
            word_count = len(self.test_text.split())

            # Formule OPTIMIS√âE : plus rapide
            base_time = 2  # Base r√©duite
            char_factor = char_count * 0.05  # Facteur r√©duit
            word_factor = word_count * 0.15  # Facteur r√©duit

            calculated_time = base_time + char_factor + word_factor

            # Limites R√âDUITES
            min_time = 3  # Minimum r√©duit
            max_time = 12  # Maximum r√©duit
            final_time = max(min_time, min(calculated_time, max_time))

            logger.info(
                f"üìä Calcul OPTIMIS√â: {char_count} chars √ó 0.05s + {word_count} mots √ó 0.15s + 2s base = {final_time:.1f}s")

            return int(final_time)

        except Exception as e:
            logger.warning(f"Erreur calcul temps attente: {e}")
            return 6  # D√©faut plus court

    def _handle_response_extract_step(self):
        """√âTAPE 7: Extraction r√©ponse OPTIMIS√âE - VERSION CORRIG√âE COPY"""
        if self.force_stop:
            return False

        logger.info("üìÑ √âTAPE 7: Extraction r√©ponse OPTIMIS√âE")
        self.step_completed.emit("response_extracting", "Extraction")

        try:
            platform_name = self.platform_profile.get('name', '')

            # üéØ CORRECTION MAJEURE: R√©cup√©rer config d'EXTRACTION (pas d√©tection)
            extraction_config = self._get_extraction_config_from_profile()
            detection_config = self.platform_profile.get('detection_config', {})

            # S√©lecteurs √† tester POUR L'EXTRACTION
            selectors = []

            # PRIORIT√â 1: Config extraction depuis response_area
            if extraction_config:
                # üéØ CORRECTION : Forcer les bons s√©lecteurs pour ChatGPT
                if 'chatgpt' in platform_name.lower():
                    logger.info("üîß CORRECTION : Application s√©lecteurs ChatGPT optimis√©s")
                    selectors.extend([
                        'article[data-testid*="conversation-turn"] .markdown.prose',  # üéØ PARFAIT
                        'article[data-testid*="conversation-turn"] .markdown',
                        '[data-message-author-role="assistant"] .markdown.prose',
                        'article[data-testid*="conversation-turn"]:last-child .prose'
                    ])
                else:
                    # Autres plateformes : utiliser config normale
                    if extraction_config.get('primary_selector'):
                        selectors.append(extraction_config['primary_selector'])
                        logger.info(f"üéØ S√©lecteur extraction principal: {extraction_config['primary_selector']}")

                    if extraction_config.get('fallback_selectors'):
                        selectors.extend(extraction_config['fallback_selectors'])
                        logger.info(f"üéØ S√©lecteurs extraction fallback: {extraction_config['fallback_selectors']}")

            # PRIORIT√â 2: Fallback depuis detection_config (ancienne m√©thode)
            elif detection_config:
                logger.warning("‚ö†Ô∏è Pas de config extraction - utilisation detection_config en fallback")
                if detection_config.get('primary_selector'):
                    selectors.append(detection_config['primary_selector'])
                if detection_config.get('fallback_selectors'):
                    selectors.extend(detection_config['fallback_selectors'])

            # PRIORIT√â 3: S√©lecteurs g√©n√©riques bas√©s sur la plateforme
            if 'chatgpt' in platform_name.lower():
                # üéØ UTILISER LES S√âLECTEURS QUI FONCTIONNENT (test√©s manuellement)
                selectors.extend([
                    'article[data-testid*="conversation-turn"] .markdown.prose',  # üéØ PARFAIT - test√©
                    'article[data-testid*="conversation-turn"]:last-of-type',  # üéØ TEST√â - marche
                    'article[data-testid="conversation-turn-2"]',  # üéØ TEST√â - marche
                    'article[data-scroll-anchor="true"]',  # üéØ TEST√â - marche
                    'article[data-testid*="conversation-turn"]',  # üéØ TEST√â - marche
                    '[data-message-author-role="assistant"] .markdown.prose',
                    '[data-start][data-end]'  # Fallback final
                ])
            else:
                # S√©lecteurs g√©n√©riques pour autres plateformes
                selectors.extend([
                    '[data-message-author-role="assistant"]:last-child',
                    '.message:last-child',
                    '.ai-response:last-child',
                    '[role="assistant"]:last-child',
                    '.markdown:last-child',
                    'p:last-child'
                ])

            logger.info(f"üéØ EXTRACTION OPTIMIS√âE avec s√©lecteurs: {selectors[:3]}...")

            # üéâ JavaScript d'extraction COPY DIRECTE - VERSION CORRIG√âE
            js_code = f'''
                        // üéØ EXTRACTION COPY DIRECTE - M√âTHODE QUI MARCHE
                        let selectors = {json.dumps(selectors[:5])};

                        console.log("üîß Extraction ChatGPT avec copy() directe...");

                        for (let selector of selectors) {{
                            try {{
                                let elements = document.querySelectorAll(selector);
                                if (elements.length > 0) {{
                                    let text = (elements[elements.length - 1].textContent || '').trim();
                                    if (text.length > 15 && 
                                        !text.includes('console.log') && 
                                        !text.includes('function()') &&
                                        !text.includes('üéØ') &&
                                        !text.includes('√âchec')) {{
                                        console.log("‚úÖ Texte trouv√© avec:", selector);
                                        console.log("üìè Longueur:", text.length, "caract√®res");

                                        // üéâ COPY DIRECTE dans presse-papiers
                                        copy(text);
                                        console.log("‚úÖ LIRIS_COPY_SUCCESS");
                                        break; // Sortir d√®s qu'on a trouv√©
                                    }}
                                }}
                            }} catch(e) {{ 
                                console.log("‚ùå Erreur avec s√©lecteur:", selector, e.message);
                                continue; 
                            }}
                        }}

                        console.log("üîß Extraction termin√©e");
                        '''

            if self._execute_js_optimized(js_code):
                # V√©rifier que l'extraction copy() a fonctionn√©
                if self.extracted_response and len(self.extracted_response) > 15:
                    logger.info(f"‚úÖ R√©ponse extraite via COPY: {len(self.extracted_response)} caract√®res")
                    logger.info(f"üìù Aper√ßu: {self.extracted_response[:150]}..." if len(
                        self.extracted_response) > 150 else f"üìù Texte: {self.extracted_response}")
                    return True

            # Fallback extraction basique RAPIDE
            logger.info("√âchec extraction sp√©cialis√©e, tentative basique RAPIDE...")
            if self._extract_basic_response_fast():
                return True

            self._handle_automation_failure("Aucune r√©ponse extraite")
            return False

        except Exception as e:
            self._handle_automation_failure(f"Erreur extraction: {str(e)}")
            return False

    def _get_extraction_config_from_profile(self):
        """üéØ NOUVELLE M√âTHODE: R√©cup√®re la config d'extraction depuis response_area"""
        try:
            # Chemin: platform_profile['extraction_config']['response_area']['platform_config']
            extraction_config = self.platform_profile.get('extraction_config', {})
            if not extraction_config:
                logger.debug("Pas de extraction_config dans le profil")
                return None

            response_area = extraction_config.get('response_area', {})
            if not response_area:
                logger.debug("Pas de response_area dans extraction_config")
                return None

            platform_config = response_area.get('platform_config', {})
            if not platform_config:
                logger.debug("Pas de platform_config dans response_area")
                return None

            logger.info("‚úÖ Configuration extraction trouv√©e depuis response_area")
            logger.info(f"   S√©lecteur principal: {platform_config.get('primary_selector', 'N/A')}")
            logger.info(f"   M√©thode: {platform_config.get('extraction_method', 'N/A')}")

            return platform_config

        except Exception as e:
            logger.error(f"Erreur r√©cup√©ration config extraction: {e}")
            return None

    def _execute_js_optimized(self, js_code):
        """Ex√©cution JavaScript OPTIMIS√âE avec copy() directe"""
        try:
            # Focus minimal sans changement de fen√™tre
            logger.info("üñ±Ô∏è Focus minimal avant console")

            # Clic centre simple
            try:
                import tkinter as tk
                root = tk.Tk()
                screen_width = root.winfo_screenwidth()
                screen_height = root.winfo_screenheight()
                root.destroy()
                click_x = screen_width // 2
                click_y = screen_height // 2
            except:
                click_x = 960
                click_y = 540

            self.mouse_controller.click(click_x, click_y)
            time.sleep(0.2)  # Plus rapide

            # Ouvrir console RAPIDE selon navigateur
            logger.info(f"üìã Ouverture console RAPIDE pour {self.browser_type}")

            try:
                from config.console_shortcuts import open_console_for_browser
                # SANS force_focus pour √©viter l'erreur
                success = open_console_for_browser(self.browser_type, self.keyboard_controller)
            except Exception as e:
                logger.info(f"Fallback raccourci direct: {e}")
                # Fallback direct
                if self.browser_type == 'firefox':
                    self.keyboard_controller.hotkey('ctrl', 'shift', 'k')
                else:
                    self.keyboard_controller.hotkey('ctrl', 'shift', 'j')
                time.sleep(0.5)
                success = True

            if not success:
                self.keyboard_controller.press_key('f12')
                time.sleep(0.4)

            # Nettoyer et ex√©cuter RAPIDE
            pyperclip.copy("console.clear();")
            self.keyboard_controller.hotkey('ctrl', 'v')

            # üéØ CORRECTION : Ctrl+Entr√©e pour Firefox
            if self.browser_type == 'firefox':
                self.keyboard_controller.hotkey('ctrl', 'enter')
            else:
                self.keyboard_controller.press_key('enter')
            time.sleep(0.1)

            pyperclip.copy(js_code)
            self.keyboard_controller.hotkey('ctrl', 'v')

            # üéØ CORRECTION : Ctrl+Entr√©e pour Firefox
            if self.browser_type == 'firefox':
                self.keyboard_controller.hotkey('ctrl', 'enter')
            else:
                self.keyboard_controller.press_key('enter')
            time.sleep(0.5)  # Attendre ex√©cution et copy()

            # üéØ NOUVELLE M√âTHODE : R√âCUP√âRATION DIRECTE via copy()
            logger.info("üéØ R√©cup√©ration directe via copy() - pas de parsing console")

            # Attendre que le copy() JavaScript soit effectu√©
            time.sleep(0.3)

            # R√©cup√©rer directement depuis le presse-papiers
            result = pyperclip.paste().strip()

            # V√©rifier que c'est valide
            if result and len(result) > 15:
                # V√©rification anti-JavaScript
                if not any(keyword in result.lower() for keyword in
                           ['function()', 'console.log', 'document.query', 'let ', 'const ', 'üéØ', 'console.clear']):
                    logger.info(f"‚úÖ Extraction copy() r√©ussie: {len(result)} caract√®res")
                    logger.info(f"üìù Aper√ßu: {result[:100]}..." if len(result) > 100 else f"üìù Texte: {result}")

                    # üéâ STOCKER DANS extracted_response
                    self.extracted_response = result

                    # Fermer console RAPIDE
                    try:
                        from config.console_shortcuts import close_console_for_browser
                        close_console_for_browser(self.browser_type, self.keyboard_controller)
                    except:
                        self.keyboard_controller.press_key('f12')

                    time.sleep(0.1)
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è Contenu suspect d√©tect√© dans copy(): {result[:50]}...")
            else:
                logger.warning(f"‚ö†Ô∏è Copy() vide ou trop court: {len(result)} caract√®res")

            # Fermer console m√™me en cas d'√©chec
            try:
                from config.console_shortcuts import close_console_for_browser
                close_console_for_browser(self.browser_type, self.keyboard_controller)
            except:
                self.keyboard_controller.press_key('f12')

            time.sleep(0.1)
            return False

        except Exception as e:
            logger.error(f"Erreur JS optimis√©: {e}")
            try:
                self.keyboard_controller.press_key('f12')
            except:
                pass
            return False

    def _extract_basic_response_fast(self):
        """Extraction basique RAPIDE de secours avec COPY"""
        try:
            # üéâ JavaScript COPY pour fallback
            js_code = '''
            // üéØ M√âTHODE COPY DIRECTE pour ChatGPT - FALLBACK
            let chatgptSelectors = [
                'article[data-testid*="conversation-turn"] .markdown.prose',
                'article[data-testid*="conversation-turn"]:last-of-type', 
                'article[data-scroll-anchor="true"]',
                'article[data-testid*="conversation-turn"]'
            ];

            console.log("üîß Extraction ChatGPT fallback avec copy()...");

            for (let selector of chatgptSelectors) {
                try {
                    let elements = document.querySelectorAll(selector);
                    if (elements.length > 0) {
                        let text = (elements[elements.length - 1].textContent || '').trim();
                        if (text.length > 15 && 
                            !text.includes('function()') && 
                            !text.includes('console.log') &&
                            !text.includes('üéØ')) {
                            console.log("‚úÖ Fallback trouv√© avec:", selector);
                            console.log("üìè Longueur:", text.length, "caract√®res");

                            // üéâ COPY DIRECTE dans presse-papiers
                            copy(text);
                            console.log("‚úÖ LIRIS_FALLBACK_COPY_SUCCESS");
                            break; // Sortir d√®s qu'on a trouv√©
                        }
                    }
                } catch(e) { 
                    console.log("‚ùå Erreur fallback:", selector, e.message);
                    continue; 
                }
            }

            console.log("üîß Extraction fallback termin√©e");
            '''

            if self._execute_js_optimized(js_code):
                # V√©rifier que le copy() fallback a fonctionn√©
                if self.extracted_response and len(self.extracted_response) > 15:
                    logger.info(f"‚úÖ Extraction fallback COPY r√©ussie: {len(self.extracted_response)} caract√®res")
                    return True

            return False

        except Exception as e:
            logger.debug(f"Erreur extraction basique rapide: {e}")
            return False

    def _handle_automation_success(self):
        """Gestion succ√®s final"""
        duration = time.time() - self.start_time
        logger.info(f"üéâ AUTOMATISATION OPTIMIS√âE R√âUSSIE en {duration:.1f}s")

        self.is_running = False
        self.automation_completed.emit(True, f"Test r√©ussi en {duration:.1f}s", duration, self.extracted_response)

    def _handle_automation_failure(self, error_message):
        """Gestion √©chec"""
        duration = time.time() - self.start_time if self.start_time else 0
        logger.error(f"‚ùå AUTOMATISATION √âCHOU√âE: {error_message}")

        self.is_running = False
        self.automation_failed.emit("automation_error", error_message)

    def stop_automation(self):
        """Arr√™t RAPIDE"""
        logger.info("üõë ARR√äT AUTOMATISATION RAPIDE")

        self.force_stop = True
        self.is_running = False

        # Nettoyer console RAPIDE
        try:
            from config.console_shortcuts import close_console_for_browser
            close_console_for_browser(self.browser_type, self.keyboard_controller)
        except:
            try:
                self.keyboard_controller.press_key('f12')
            except:
                pass

        # R√©initialiser
        if hasattr(self.conductor, 'browser_already_active'):
            self.conductor.browser_already_active = False

        duration = time.time() - self.start_time if self.start_time else 0
        self.automation_completed.emit(False, "Arr√™t√© par utilisateur", duration, "")

    def get_current_status(self):
        """Statut actuel"""
        duration = time.time() - self.start_time if self.start_time else 0
        return {
            'is_running': self.is_running,
            'duration': duration,
            'force_stop': self.force_stop,
            'platform': self.platform_profile.get('name', '') if self.platform_profile else '',
            'extracted_response_length': len(self.extracted_response)
        }

    def is_automation_running(self):
        """V√©rifie si en cours"""
        return self.is_running and not self.force_stop