#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Utilitaire pour nettoyer le cache des ic√¥nes Windows et r√©initialiser l'application
"""

import os
import time
import sys
import shutil
import sqlite3
import winreg
from pathlib import Path
from glob import glob


def clear_windows_icon_cache():
    """Nettoie le cache des ic√¥nes Windows sans arr√™ter explorer.exe"""
    print("\n=== Nettoyage du cache des ic√¥nes Windows ===")

    try:
        # Supprimer les fichiers de cache d'ic√¥nes accessibles
        user_folder = Path.home()
        cache_files = [
            user_folder / "AppData" / "Local" / "IconCache.db",
            *(user_folder / "AppData" / "Local" / "Microsoft" / "Windows" / "Explorer").glob("iconcache_*.db")
        ]

        for cache_file in cache_files:
            try:
                if cache_file.exists():
                    cache_file.unlink()
                    print(f"‚úì Supprim√©: {cache_file}")
            except PermissionError:
                print(f"‚úó Permission refus√©e pour {cache_file}. Essayez avec des droits administrateur.")
            except Exception as e:
                print(f"‚úó Erreur lors de la suppression de {cache_file}: {e}")

        return True

    except Exception as e:
        print(f"‚ùå Erreur lors du nettoyage du cache: {e}")
        return False


def clear_application_database():
    """Nettoie la base de donn√©es SQLite de l'application"""
    print("\n=== Nettoyage de la base de donn√©es ===")

    app_dir = Path(__file__).parent.parent
    db_path = app_dir / "data" / "liris.db"

    if db_path.exists():
        try:
            # Sauvegarder d'abord
            backup_path = db_path.with_name(f'liris_{time.strftime("%Y%m%d_%H%M%S")}.db.backup')
            shutil.copy2(db_path, backup_path)
            print(f"‚úì Sauvegarde cr√©√©e: {backup_path}")

            # Supprimer la base de donn√©es
            db_path.unlink()
            print(f"‚úì Base de donn√©es supprim√©e")

            # Cr√©er une nouvelle base de donn√©es vide
            conn = sqlite3.connect(db_path)
            conn.close()
            print(f"‚úì Nouvelle base de donn√©es vide cr√©√©e")

        except Exception as e:
            print(f"‚úó Erreur lors du nettoyage de la DB: {e}")
    else:
        print("‚Ñπ Aucune base de donn√©es trouv√©e")


def clear_qsettings():
    """Nettoie les QSettings de l'application pour r√©initialiser la langue"""
    print("\n=== Nettoyage des param√®tres Qt ===")

    try:
        settings_path = r"Software\Liris\IACollaborative"
        try:
            key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, settings_path, 0, winreg.KEY_ALL_ACCESS)
            i = 0
            values = []
            while True:
                try:
                    name, _, _ = winreg.EnumValue(key, i)
                    values.append(name)
                    i += 1
                except WindowsError:
                    break

            for value_name in values:
                try:
                    winreg.DeleteValue(key, value_name)
                    print(f"‚úì Supprim√©: {value_name}")
                except:
                    pass

            winreg.CloseKey(key)
            try:
                winreg.DeleteKey(winreg.HKEY_CURRENT_USER, settings_path)
                print("‚úì Cl√© de registre supprim√©e")
            except:
                print("‚Ñπ Cl√© de registre d√©j√† supprim√©e")
        except FileNotFoundError:
            print("‚Ñπ Aucun param√®tre Qt trouv√© dans le registre")
        except Exception as e:
            print(f"‚úó Erreur lors de l'acc√®s au registre: {e}")

    except Exception as e:
        print(f"‚úó Erreur lors du nettoyage des QSettings: {e}")


def set_default_language():
    """Force la langue fran√ßaise par d√©faut en modifiant QSettings"""
    print("\n=== Configuration de la langue par d√©faut ===")

    try:
        from PyQt5.QtCore import QSettings
        settings = QSettings("Liris", "IACollaborative")
        settings.setValue("language", "fr")
        print("‚úì Langue par d√©faut d√©finie: Fran√ßais")
    except Exception as e:
        print(f"‚úó Erreur lors de la configuration de la langue: {e}")


def restart_explorer():
    """Red√©marre l'Explorateur Windows pour appliquer les modifications du cache des ic√¥nes"""
    print("\n=== Red√©marrage de l'Explorateur Windows ===")
    try:
        confirm = input("Voulez-vous red√©marrer l'Explorateur Windows maintenant ? (o/n) : ").strip().lower()
        if confirm != 'o':
            print("‚Ñπ Red√©marrage annul√©. Veuillez red√©marrer l'Explorateur manuellement ou red√©marrer votre PC.")
            return

        # Arr√™ter l'Explorateur
        os.system("taskkill /IM explorer.exe /F")
        print("‚úì Explorateur Windows arr√™t√©")

        # Attendre un court instant
        time.sleep(1)

        # Red√©marrer l'Explorateur
        os.system("start explorer.exe")
        print("‚úì Explorateur Windows red√©marr√©")
    except Exception as e:
        print(f"‚ùå Erreur lors du red√©marrage de l'Explorateur: {e}")


def main():
    """Fonction principale"""
    print("=== NETTOYAGE ET R√âINITIALISATION LIRIS ===")
    print(f"Date: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"OS: {sys.platform}")

    if sys.platform != "win32":
        print("‚ùå Ce script est uniquement pour Windows")
        return

    print("\nüîÑ D√©but de la r√©initialisation...")

    # 1. Nettoyer le cache des ic√¥nes Windows
    clear_windows_icon_cache()

    # 2. Nettoyer la base de donn√©es
    clear_application_database()

    # 3. Nettoyer les QSettings
    clear_qsettings()

    # 4. D√©finir le fran√ßais comme langue par d√©faut
    set_default_language()

    # 5. Red√©marrer l'Explorateur Windows (facultatif)
    restart_explorer()

    print("\n‚ú® NETTOYAGE TERMIN√â ‚ú®")
    print("\nL'application a √©t√© r√©initialis√©e avec succ√®s.")
    print("La langue sera maintenant en fran√ßais par d√©faut.")
    print("Vous pouvez red√©marrer l'application.\n")


if __name__ == "__main__":
    main()